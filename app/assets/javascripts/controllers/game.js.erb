function GameController (numOfPlayers) {
  this.players = numOfPlayers;

  this.playerOne;
  this.asteria;
  this.asteriaKeys;
  this.playerOneScore;
  this.playerOneScoreText;
  this.playerOneHealthBar;

  this.playerTwo;
  this.wysteria;
  this.wysteriaKeys;
  this.playerTwoScore;
  this.playerTwoScoreText;
  this.playerTwoHealthBar;

  this.game;
  // this.worldModel;
  this.platforms;
  this.cloud;
  // this.ground;
  // this.sky;
  this.blueOrbs;
  this.redOrbs;
  this.endGame;
}

GameController.prototype.run = function () {
  this.game = new Phaser.Game(800, 600, Phaser.AUTO, 'gameDiv', { preload: this.preload, create: this.create, update: this.update, render: this.render });
  // this.worldModel = new World();
  this.endGame = new EndGame(this.game);
}

GameController.prototype.preload = function () {
  this.game.load.image('space', '<%= asset_path "space.jpg" %>');
  this.game.load.image('cloud', '<%= asset_path "cloud-sprite.png" %>');
  this.game.load.image('redOrb', '<%= asset_path "unsafe_orb.png" %>');
  this.game.load.image('heart', '<%= asset_path "heart-sprite.png" %>');
  this.game.load.image('blueOrb', '<%= asset_path "safe_orb.png" %>');
  this.game.load.image('hitBox', '<%= asset_path "red.jpg" %>');
  this.game.load.spritesheet('player1', '<%= asset_path "dude.png" %>', 32, 48);
  this.game.load.spritesheet('player2', '<%= asset_path "dude2.png" %>', 32, 48);
  this.game.load.image('gameover', '<%= asset_path "game_over.png" %>');
}

GameController.prototype.create = function () {

  // Create World
  this.game.world.setBounds(0, 0, 1280, 600);
  this.game.physics.startSystem(Phaser.Physics.ARCADE);
  this.game.add.sprite(0, 0, 'space');

  this.platforms = this.game.add.group();
  this.platforms.enableBody = true;

  var ground = this.platforms.create(0, this.game.world.height + 60);
  ground.scale.setTo(100, 1);
  ground.body.immovable = true;

  this.cloud = this.platforms.create(400, 400, 'cloud');
  this.cloud.body.immovable = true;
  this.cloud.body.setSize(90,35);
  this.cloud.lifespan = 10000;

  // Create Player 1
  this.asteria = new Asteria(this.game, 475, 0, 'player1');
  this.playerOne = this.asteria.sprite;
  this.playerOneHealthBar = this.game.add.group();
  var createHealthBar = function (healthbar) {
    for (var i = 0; i < 5; i++) {
      healthbar.create((i * 40)+16, 16, 'heart');
    }
  }
  createHealthBar(this.playerOneHealthBar);
  this.playerOneHealthBar.fixedToCamera = true;

  this.game.physics.arcade.enable(this.asteria.sprite);
  this.asteria.entersTheScene();
  this.asteria.setMotions();

  // Create Player 2
  if (this.players === 2) {
    this.wysteria = new Asteria(this.game, 425, 0, 'player2');
    this.playerTwo = this.wysteria.sprite;
    this.wysteria.createWysteriaHealthbar(this.game);
    this.game.physics.arcade.enable(this.playerTwo);
    this.wysteria.entersTheScene();
    this.wysteria.setMotions();
  }

  // Set the camera
  this.game.camera.follow(this.playerOne, 2);

  //  Set controls
  this.asteriaKeys = this.game.input.keyboard.createCursorKeys();

  if (this.players === 2) {
    this.wysteriaKeys = [];
    this.wysteriaKeys.push(this.game.input.keyboard.addKey(Phaser.Keyboard.A));
    this.wysteriaKeys.push(this.game.input.keyboard.addKey(Phaser.Keyboard.D));
  }

  // Should probably be done for Wysteria too?
  this.game.input.keyboard.onUpCallback = function (event) {
    if ((event.keyCode === Phaser.Keyboard.DOWN) && this.playerOne.body.touching.down) {
        this.asteria.stand();
        this.asteria.hop();
    }
  }

  // Create blue orbs
  this.blueOrbs = this.game.add.group();
  this.blueOrbs.enableBody = true;

  var rainBlueOrbs = function (blueOrbs, game) {
    for (var i = 0; i < Math.floor(Math.random()*10+5); i++) {
      var blueOrb = blueOrbs.create(game.world.randomX, 0, 'blueOrb');
      blueOrb.body.gravity.y = 100;
      blueOrb.body.bounce.y = 0.7 + Math.random() * 0.2;
      blueOrb.lifespan = 10000;
    }
  }

  this.game.time.events.loop(Phaser.Timer.SECOND * 3, rainBlueOrbs(this.blueOrbs, this.game), this.game);

  // Create red orbs
  this.redOrbs = this.game.add.group();
  this.redOrbs.enableBody = true;

  var rainRedOrbs = function (redOrbs, game) {
    for (var i = 0; i < Math.floor(Math.random()*10+5); i++) {
      var redOrb = redOrbs.create(game.world.randomX, 0, 'redOrb');
      redOrb.body.gravity.y = 100;
      redOrb.body.bounce.y = 0.7 + Math.random() * 0.2;
      redOrb.lifespan = 10000;
    }
  }

  this.game.time.events.loop(Phaser.Timer.SECOND * 5, rainRedOrbs(this.redOrbs, this.game), this.game);

  // Create scores
  if (this.players === 1) {
    this.playerOneScore = 0;
    this.playerOneScoreText = this.game.add.text(650, 16, 'Score: ' + this.playerOneScore, { fontSize: '32px', fill: '#FFF' });
    this.playerOneScoreText.fixedToCamera = true;
  } else {
    this.playerOneScore = 0;
    this.playerOneScoreText = this.game.add.text(600, 16, 'Player 1: ' + this.playerOneScore, { fontSize: '32px', fill: '#FFF' });
    this.playerOneScoreText.fixedToCamera = true;

    this.playerTwoScore = 0;
    this.playerTwoScoreText = this.game.add.text(600, 56, 'Player 2: ' + this.playerTwoScore, { fontSize: '32px', fill: '#FFF' });
    this.playerTwoScoreText.fixedToCamera = true;
  }
}

GameController.prototype.update = function () {

  // //  Collide the players and orbs with the platforms
  // this.game.physics.arcade.collide(this.playerOne, this.platforms);
  // this.game.physics.arcade.collide(this.redOrbs, this.platforms);
  // this.game.physics.arcade.collide(this.blueOrbs, this.platforms);
  // if (this.players === 2) {
  //   this.game.physics.arcade.collide(this.playerTwo, this.platforms);
  //   this.game.physics.arcade.collide(this.playerOne, this.playerTwo);
  // }
  //
  // // Set starting X velocities
  // this.asteria.setVelocityX(0);
  // if (this.players === 2) {
  //   this.wysteria.setVelocityX(0);
  // }
  //
  // // Set object lifespans
  // this.cloud.alpha = this.cloud.lifespan / 10000;
  //
  // this.blueOrbs.forEachAlive(function (blueOrb) {
  //   blueOrb.alpha = blueOrb.lifespan / 10000;
  // });
  //
  // this.redOrbs.forEachAlive(function (redOrb) {
  //   redOrb.alpha = redOrb.lifespan / 10000;
  // });
  //
  // // Player / Orb collisions
  // var collidePlayerOneBlueOrb = function (player, blueOrb) {
  //   blueOrb.kill();
  //   //  Add and update the score
  //   this.playerOneScore += 10;
  //   if (this.players === 1) {
  //     this.playerOneScoreText.text = 'Score: ' + this.playerOneScore;
  //   } else {
  //     this.playerOneScoreText.text = 'Player 1: ' + this.playerOneScore;
  //   }
  // }
  //
  // var collidePlayerTwoBlueOrb = function (player, blueOrb) {
  //   blueOrb.kill();
  //   //  Add and update the score
  //   this.playerTwoScore += 10;
  //   this.playerTwoScoreText.text = 'Player 2: ' + this.playerTwoScore;
  // }
  //
  // var collidePlayerRedOrb = function (player, redOrb) {
  //   redOrb.kill();
  // }
  //
  // // Health Conditions (Move to model)
  // var showHitBox = function () {
  //   var hitBox = this.game.add.sprite(0, 0, 'hitBox');
  //   hitBox.width = this.game.width;
  //   hitBox.height = this.game.height;
  //   hitBox.fixedToCamera = true;
  //   hitBox.lifespan = 70;
  //   hitBox.alpha = 0.7;
  // }
  //
  // var playerOneLoseHealth = function (player, redOrb, healthBar) {
  //   healthBar.children.pop();
  // }
  //
  // var playerTwoLoseHealth = function (player, redOrb) {
  //   if (this.wysteria.health === 1) {
  //     this.playerTwo.kill();
  //   } else {
  //     this.wysteria.health -= 1;
  //     this.playerTwoHealthBar.children.pop();
  //   }
  //
  //   showHitBox();
  // }
  //
  // // Collision logic
  // this.game.physics.arcade.overlap(this.playerOne, this.redOrbs, playerOneLoseHealth(this.playerOne, this.redOrbs, this.playerOneHealthBar), this.asteria.canSurvive, this.game);
  // this.game.physics.arcade.overlap(this.playerOne, this.redOrbs, collidePlayerRedOrb, null, this.game);
  // this.game.physics.arcade.overlap(this.playerOne, this.blueOrbs, collidePlayerOneBlueOrb, null, this.game);
  //
  // this.game.physics.arcade.overlap(this.playerTwo, this.redOrbs, playerTwoLoseHealth, null, this.game);
  // this.game.physics.arcade.overlap(this.playerTwo, this.redOrbs, collidePlayerRedOrb, null, this.game);
  // this.game.physics.arcade.overlap(this.playerTwo, this.blueOrbs, collidePlayerTwoBlueOrb, null, this.game);


  // Set win conditions (come back and fix this)
  if (this.players === 1) {
    this.endGame.setOnePlayerWinConditions(this.playerOneScore);

  } else {
    // TwoPlayerEndGame.setConditions(this.playerOneScore, this.playerTwoScore);
  }

  // Player 1 movement
  if (this.asteriaKeys.left.isDown) {
    this.asteria.moveLeft();
  } else if (this.asteriaKeys.right.isDown) {
    this.asteria.moveRight();
  } else {
    this.asteria.standStill();
  }
  //  Autojump for minigame
  if (this.playerOne.body.touching.down) {
    this.asteria.jump();
  }

  // Player 2 movement
  if (this.players === 2) {
    if (this.wysteriaKeys[0].isDown) {
      this.wysteria.moveLeft();
    } else if (this.wysteriaKeys[1].isDown) {
      this.wysteria.moveRight();
    } else {
      this.wysteria.standStill();
    }
    //  Autojump for minigame
    if (this.playerTwo.body.touching.down) {
      this.wysteria.jump();
    }
  }
}

GameController.prototype.render = function() {

  // game.debug.cameraInfo(game.camera, 32, 32);
  // game.debug.spriteCoords(player, 32, 500);
  // game.debug.body(platforms.children[1]);
}
