var GameController = function (numOfPlayers) {
  this.players = numOfPlayers;
  this.playerOne;
  this.asteria;
  this.asteriaKeys;
  this.playerTwo;
  this.wysteria;
  this.wysteriaKeys;
  this.game;
  this.world;
  this.platforms;
  this.ledge;
  this.ground;
  this.sky;
  this.cursors;
  // this.spacebar;
  // this.shootWeapon;
  this.blueOrbs;
  this.redOrbs;
  this.playerOneScore;
  this.playerTwoScore;
  this.playerOneScoreText;
  this.playerTwoScoreText;
  this.healthbar;
  this.endGame;
}

GameController.prototype.run = function () {
  this.game = new Phaser.Game(800, 600, Phaser.AUTO, 'gameDiv', { preload: this.preload, create: this.create, update: this.update, render: this.render });
  this.world = new World();
  this.endGame = new EndGame(this.game);
}

GameController.prototype.preload = function () {
  this.game.load.image('space', '<%= asset_path "space.jpg" %>');
  this.game.load.image('cloud', '<%= asset_path "cloud-sprite.png" %>');
  this.game.load.image('redOrb', '<%= asset_path "unsafe_orb.png" %>');
  this.game.load.image('heart', '<%= asset_path "heart-sprite.png" %>');
  this.game.load.image('blueOrb', '<%= asset_path "safe_orb.png" %>');
  this.game.load.image('hitBox', '<%= asset_path "red.jpg" %>');
  this.game.load.spritesheet('player1', '<%= asset_path "dude.png" %>', 32, 48);
  this.game.load.spritesheet('player2', '<%= asset_path "dude2.png" %>', 32, 48);
  this.endGame.loadAssets();
}

GameController.prototype.create = function () {

  // Create World
  this.world.setCanvas(this.game, 0, 0, 1280, 600);
  this.game.physics.startSystem(Phaser.Physics.ARCADE);
  this.world.buildWorld(this.game);

  // Create Player 1
  this.asteria = new Asteria(this.game, 450, 0, 'player1');
  this.playerOne = asteria.sprite;
  this.asteria.createHealthbar(this.game);
  this.game.physics.arcade.enable(this.playerOne);
  this.asteria.entersTheScene();
  this.asteria.setMotions();

  // Create Player 2
  if (this.players === 2) {
    this.wysteria = new Asteria(this.game, 450, 0, 'player2');
    this.playerTwo = wysteria.sprite;
    this.wysteria.createWysteriaHealthbar(this.game);
    this.game.physics.arcade.enable(this.playerTwo);
    this.wysteria.entersTheScene();
    this.wysteria.setMotions();
  }

  // Set the camera
  this.world.setCamera(this.game, this.playerOne);

  //  Set controls
  this.cursors = this.game.input.keyboard.createCursorKeys();
  this.asteriaKeys = this.game.input.keyboard.addKey(Phaser.Keyboard.A);
  if (this.players === 2) {
    this.wysteriaKeys = this.game.input.keyboard.addKey(Phaser.Keyboard.D);
  }
  // Is spacebar needed?
  // spacebar = game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);

  // Should probably be done for Wysteria too?
  this.game.input.keyboard.onUpCallback = function (event) {
    if ((event.keyCode === Phaser.Keyboard.DOWN) && this.playerOne.body.touching.down) {
        this.asteria.stand();
        this.asteria.hop();
    }
  }

  // Create blue orbs
  this.blueOrbs = this.game.add.group();
  this.blueOrbs.enableBody = true;
  rainOrbs();
  this.game.time.events.loop(Phaser.Timer.SECOND * 3, rainBlueOrbs, this.game);

  // Create red orbs
  this.redOrbs = this.game.add.group();
  this.redOrbs.enableBody = true;
  this.game.time.events.loop(Phaser.Timer.SECOND * 5, rainRedOrbs, this.game);

  // Create scores
  if (this.players === 1) {
    this.playerOneScore = 0;
    this.playerOneScoreText = this.game.add.text(650, 16, 'Score: ' + this.playerOneScore, { fontSize: '32px', fill: '#FFF' });
    this.playerOneScoreText.fixedToCamera = true;
  } else {
    this.playerOneScore = 0;
    this.playerOneScoreText = this.game.add.text(600, 16, 'Player 1: ' + this.playerOneScore, { fontSize: '32px', fill: '#FFF' });
    this.playerOneScoreText.fixedToCamera = true;

    this.playerTwoScore = 0;
    this.playerTwoScoreText = this.game.add.text(600, 56, 'Player 2: ' + this.playerTwoScore, { fontSize: '32px', fill: '#FFF' });
    this.playerTwoScoreText.fixedToCamera = true;
  }
}

GameController.prototype.update = function () {



  //  Collide the player and the redOrbs with the platforms
  game.physics.arcade.collide(player, platforms);
  game.physics.arcade.collide(redOrbs, platforms);
  game.physics.arcade.collide(orbs, platforms);

  asteria.setVelocityX(0);

  // killDeadOrbs = function(orb) {
  //   if (orb.body.velocity.y < 1 ) {
  //     orb.bounceCount += 1;
  //     console.log(orb.bounceCount);
  //   }
  //   if (orb.bounceCount > 2) {
  //     orb.kill();
  //   }
  // }

  // orbs.children.forEach(killDeadOrbs);

  ledge.alpha = ledge.lifespan / 10000;

  redOrbs.forEachAlive(function(orb){
    orb.alpha = orb.lifespan / 10000;
  });

  orbs.forEachAlive(function(orb){
    orb.alpha = orb.lifespan / 10000;
  });

  collectRedOrb = function(player, redOrb) {
      redOrb.kill();
  }

  collectOrbs = function(player, orb) {
    orb.kill();
    //  Add and update the score
    score += 10;
    scoreText.text = 'Score: ' + score;
  }

  // Health Conditions //

  loseHealth = function() {
    if (asteria.health === 1){
      player.kill();
    }
    asteria.health -= 1
    healthbar.children.pop();
    hitBox = game.add.sprite( 0, 0, 'hitBox');
    hitBox.width = game.width;
    hitBox.height = game.height;
    hitBox.fixedToCamera = true;
    hitBox.lifespan = 70;
    hitBox.alpha = 0.7;
  }

  game.physics.arcade.overlap(player, redOrbs, loseHealth, null, game);
  game.physics.arcade.overlap(player, redOrbs, collectRedOrb, null, game);


  // Movement Conditions //

  endGame.setOnePlayerWinConditions(score);
  game.physics.arcade.overlap(player, orbs, collectOrbs, null, this);

  // function collisionHandler (obj1, obj2) {
  //   obj1.kill();
  // }

  // game.physics.arcade.collide(player, ground, collisionHandler, null, this);
  // game.physics.arcade.collide(orbs, ground, collisionHandler, null, this);

  if (cursors.left.isDown) {
    asteria.moveLeft();
  } else if (cursors.right.isDown) {
    asteria.moveRight();
  } else {
    asteria.standStill();
  }

  //  Allow the player to jump if they are touching the ground.
  // if (spacebar.isDown && player.body.touching.down) {
  //   asteria.jump();
  // }

  //  Autojump for minigame
  if (player.body.touching.down) {
    asteria.jump();
  }


  if (cursors.down.isDown && player.body.touching.down && cursors.left.isDown) {
      asteria.crawlLeft();
  } else if (cursors.down.isDown && player.body.touching.down && cursors.right.isDown) {
      asteria.crawlRight();
  } else if (cursors.down.isDown && player.body.touching.down) {
      asteria.crouch();
  }


}

GameController.prototype.render = function() {

  // game.debug.cameraInfo(game.camera, 32, 32);
  // game.debug.spriteCoords(player, 32, 500);
  // game.debug.body(platforms.children[1]);
}
